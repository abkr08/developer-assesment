{"ast":null,"code":"import _slicedToArray from \"/Users/Gotzil/Desktop/React/Assessment/client/students-list/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Gotzil/Desktop/React/Assessment/client/students-list/src/components/StudentsView.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport classes from './StudentsView.module.css';\n\nconst StudentsView = props => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        studentList = _useState2[0],\n        updateList = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        nationalities = _useState4[0],\n        updateNationalities = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        selectedNationality = _useState6[0],\n        updateSelectedNationality = _useState6[1];\n\n  const _useState7 = useState(null),\n        _useState8 = _slicedToArray(_useState7, 2),\n        order = _useState8[0],\n        updateOrder = _useState8[1];\n\n  const _useState9 = useState(null),\n        _useState10 = _slicedToArray(_useState9, 2),\n        errorMessage = _useState10[0],\n        updateErrorMessage = _useState10[1];\n\n  useEffect(() => {\n    axios.get('http://localhost:8080/students').then(res => {\n      if (res.status === 200) {\n        updateList(res.data);\n        let nationalities = Array.from(new Set(res.data.map(item => item.nationality))).sort((a, b) => {\n          return a.localeCompare(b);\n        });\n        updateNationalities(nationalities);\n        updateSelectedNationality(nationalities[0]);\n        console.log(res);\n      } else {\n        updateErrorMessage(res.data);\n      }\n    }).catch(err => console.log(err));\n  }, []);\n\n  const selectionChangedHandler = event => {\n    updateSelectedNationality(event.target.value);\n  };\n\n  const sortItems = () => {\n    let listCopy = [...studentList];\n\n    if (!order || order === 'descending') {\n      listCopy.sort((a, b) => {\n        return a.firstName.localeCompare(b.firstName);\n      });\n      updateList(listCopy);\n      updateOrder('ascending');\n    } else {\n      listCopy.sort((a, b) => {\n        return b.firstName.localeCompare(a.firstName);\n      });\n      updateList(listCopy);\n      updateOrder('descending');\n    }\n  };\n\n  let content = null;\n\n  if (!studentList.length) {\n    if (errorMessage) {\n      alert('eerr');\n      content = React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, errorMessage);\n    } else {\n      content = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      });\n    }\n  } else {\n    content = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      onChange: selectionChangedHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, nationalities.map((item, i) => React.createElement(\"option\", {\n      key: item + i,\n      value: item,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, item))), React.createElement(\"ul\", {\n      className: classes.ListContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, studentList.filter(item => item.nationality === selectedNationality).map(student => React.createElement(\"li\", {\n      className: classes.ListItem,\n      key: student._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"\".concat(student.firstName, \" \").concat(student.lastName, \" (\").concat(student.age, \")\")))), React.createElement(\"span\", {\n      className: classes.ButtonsContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: sortItems,\n      className: [classes.Button, classes.SortButton].join(' '),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Sort\"), React.createElement(\"button\", {\n      onClick: () => props.history.push('/new'),\n      className: [classes.Button, classes.AddButton].join(' '),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Add student\")));\n  }\n\n  return React.createElement(\"div\", {\n    className: classes.StudentsView,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, content);\n};\n\nexport default StudentsView;\n\nconst Spinner = () => React.createElement(\"div\", {\n  className: classes.Spinner,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 90\n  },\n  __self: this\n});","map":{"version":3,"sources":["/Users/Gotzil/Desktop/React/Assessment/client/students-list/src/components/StudentsView.js"],"names":["React","useState","useEffect","axios","classes","StudentsView","props","studentList","updateList","nationalities","updateNationalities","selectedNationality","updateSelectedNationality","order","updateOrder","errorMessage","updateErrorMessage","get","then","res","status","data","Array","from","Set","map","item","nationality","sort","a","b","localeCompare","console","log","catch","err","selectionChangedHandler","event","target","value","sortItems","listCopy","firstName","content","length","alert","i","ListContainer","filter","student","ListItem","_id","lastName","age","ButtonsContainer","Button","SortButton","join","history","push","AddButton","Spinner"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\n\nimport classes from './StudentsView.module.css';\n\nconst StudentsView = props => {\n    const [studentList, updateList] = useState([]);\n    const [nationalities, updateNationalities] = useState([]);\n    const [selectedNationality, updateSelectedNationality] = useState(null);\n    const [order, updateOrder] = useState(null);\n    const[errorMessage, updateErrorMessage] = useState(null);\n    \n    useEffect(() => {\n            axios.get('http://localhost:8080/students')\n                .then(res => {\n                    if (res.status === 200){\n                        updateList(res.data);\n                        let nationalities = Array.from(new Set(res.data.map(item => item.nationality))).sort((a, b) => {\n                            return a.localeCompare(b);\n                        });\n                        updateNationalities(nationalities);\n                        updateSelectedNationality(nationalities[0]);\n                        console.log(res);\n                    } else {\n                        updateErrorMessage(res.data)\n                    }\n                })\n                .catch(err => console.log(err));\n                    \n    }, []);\n\n    const selectionChangedHandler = event => {\n        updateSelectedNationality(event.target.value);\n    }\n\n    const sortItems = () => {\n        let listCopy = [...studentList];\n        if (!order || order === 'descending'){\n            listCopy.sort((a, b) => {\n                return a.firstName.localeCompare(b.firstName);\n            });\n            updateList(listCopy);\n            updateOrder('ascending');\n        } else {\n            listCopy.sort((a, b) => {\n                return b.firstName.localeCompare(a.firstName);\n            });\n            updateList(listCopy);\n            updateOrder('descending')\n        }\n\n    }\n    let content = null;\n\n    if (!studentList.length){\n        if (errorMessage) {\n            alert('eerr')\n            content = <h1>{errorMessage}</h1>\n        } else {\n            content = <Spinner />\n        }\n    } else {\n        content = (\n            <div>\n                <select onChange={selectionChangedHandler} >\n                    {nationalities.map((item, i) => <option key={item+i} value={item}>{item}</option>)}\n                </select>\n                <ul className={classes.ListContainer}>\n                    {studentList.filter(item => item.nationality === selectedNationality).map(student => (\n                        <li className={classes.ListItem} key={student._id}>{`${student.firstName} ${student.lastName} (${student.age})`}</li>\n                    ))}\n                </ul>\n                <span className={classes.ButtonsContainer}>\n                    <button onClick={sortItems} className={[classes.Button, classes.SortButton].join(' ')}>Sort</button>\n                    <button onClick={() => props.history.push('/new')} className={[classes.Button, classes.AddButton].join(' ')}>Add student</button>\n                </span>\n            </div>\n        )\n    }\n    return (\n        <div className={classes.StudentsView}>\n            {content}\n        </div>\n    )\n}\n\nexport default StudentsView;\n\nconst Spinner = () => (\n    <div className={classes.Spinner}></div>\n)"]},"metadata":{},"sourceType":"module"}